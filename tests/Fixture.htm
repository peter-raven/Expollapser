<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title></title>
	<script type="text/javascript" src="js/jquery-1.4.1.js"></script>
	<script type="text/javascript" src="js/qunit.js"></script>
	<script type="text/javascript" src="../expollapser.js"></script>
	<script type="text/javascript" src="js/sinon-1.0.0.js"></script>
	<link rel="stylesheet" href="css/qunit.css" type="text/css" media="screen" />
	<script type="text/javascript">

	    $(document).ready(function () {

	        module('Expollapser init');

	        test('Expollapser default init with no settings', function () {
	            $('#header1').expollapser();
	        });

	        module('Setting toggler');

	        test('Default init sets toggler to the header', function () {
	            var $header = $('#header1');
	            $header.expollapser();
	            equals($header.data('expollapser').getTogglers($header).get(0), $header.get(0), 'Toggler should default to the header (header supplied as parameter)');
	        });

	        test('Toggler setting \'headerLinks\' will select all links in header', function () {
	            var $header = $('#header2');
	            $header.expollapser({ toggler: 'headerLinks' });
	            equals($header.data('expollapser').getTogglers($header).get(0), $header.find('#link1, #link2').get(0), 'Toggler should select anchor tags in header');
	            equals($header.data('expollapser').getTogglers($header).get(1), $header.find('#link1, #link2').get(1), 'Toggler should select anchor tags in header');
	        });

	        test('Toggler setting with jQuery expression will select inside header', function () {
	            var $header = $('#header3');
	            $header.expollapser({ toggler: 'span img.selector1' });
	            equals($header.data('expollapser').getTogglers($header).get(0), $header.find('#image1').get(0), 'Toggler (jQuery) should select image tag in header');
	        });

	        test('Toggler setting with function will select using function', function () {
	            var $header = $('#header3');
	            var customToggler = function ($header) { return $('span img.selector1', $header); };
	            var mock = sinon.spy(customToggler);
	            $header.expollapser({ toggler: mock });
	            equals(mock.callCount, 1);
	            equals($header.data('expollapser').settings.toggler($header).get(0), $header.find('#image1').get(0), 'Toggler (function) should select image tag in header');
	        });

	        module('Setting contentElement');

	        test('contentElement will default to next', function () {
	            var $header = $('#header4');
	            $header.expollapser();
	            equals($header.data('expollapser').settings.contentElement($header).get(0), $('#nextContent').get(0));
	        });

	        test('contentElement \'prev\' will select previous sibling to header', function () {
	            var $header = $('#header4');
	            $header.expollapser({ 'contentElement': 'prev' });
	            equals($header.data('expollapser').settings.contentElement($header).get(0), $('#prevContent').get(0));
	        });

	        test('contentElement with jQuery expression will select by jQuery', function () {
	            var $header = $('#header5');
	            $header.expollapser({ contentElement: '#jqContentElem' });

	            equals($header.data('expollapser').settings.contentElement($header).get(0), $('#jqContentElem').get(0));
	        });

	        test('contentElement with function will select by function', function () {
	            var $header = $('#header5');
	            var f = function ($header) { return $header.next().next().next() };
	            var mock = sinon.spy(f);
	            $header.expollapser({ contentElement: mock });

	            equals($header.data('expollapser').settings.contentElement($header).get(0), $('#jqContentElem').get(0));
	            ok(mock.callCount > 0);
	        });

	        module('Open');

	        test('Expollapser will default to closed state', function () {
	            var $header = $('#header12');
	            $header.expollapser();
	            equals($header.data('expollapser').isopen, false);
	        });

	        test('Open setting to true will affect open state', function () {
	            var $header = $('#header12');
	            $header.expollapser({ 'open': true });
	            equals($header.data('expollapser').isopen, true);
	        });

	        test('Closed state will ensure that content part is hidden.', function () {
	            var $header = $('#header20');
	            $header.expollapser({ 'open': false });
	            equals($header.next().css('display'), 'none');
	        });

	        test('Open state will ensure that content part is shown.', function () {
	            var $header = $('#header21');
	            $header.expollapser({ 'open': true });
	            notEqual($header.next().css('display'), 'none');
	        });

	        module('ExpandHeaderCss');

	        test('expandHeaderCss will not affect header css on init with closed state', function () {
	            var $header = $('#header6');
	            $header.expollapser({ expandHeaderCss: 'myHeaderCss' });
	            ok(!$header.hasClass('myHeaderCss'));
	        });

	        test('expandHeaderCss will apply css to header on init with open state', function () {
	            var $header = $('#header13');
	            $header.expollapser({ expandHeaderCss: 'myHeaderCss', 'open': true });
	            ok($header.hasClass('myHeaderCss'));
	        });

	        test('expandHeaderCss will apply css to header on expand', function () {
	            var $header = $('#header7');
	            $header.expollapser({ expandHeaderCss: 'myHeaderCss' });
	            $header.expollapser('expand');

	            ok($header.hasClass('myHeaderCss'));
	        });

	        test('expandHeaderCss will remove added css from header on collapse', function () {
	            var $header = $('#header8');
	            $header.expollapser({ expandHeaderCss: 'myHeaderCss', collapseAnimator: function (header, content, toggler, callback) { $(content).hide(); callback(); } });
	            $header.expollapser('expand');
	            $header.expollapser('collapse');
	            ok(!$header.hasClass('myHeaderCss'));
	        });

	        module('CollapseHeaderCss');

	        test('collapseHeaderCss will not affect header css on init with open state', function () {
	            var $header = $('#header6b');
	            $header.expollapser({ collapseHeaderCss: 'myHeaderCss', 'open': true });
	            ok(!$header.hasClass('myHeaderCss'));
	        });

	        test('collapseHeaderCss will apply css to header on init with closed state', function () {
	            var $header = $('#header14');
	            $header.expollapser({ collapseHeaderCss: 'myHeaderCss' });
	            ok($header.hasClass('myHeaderCss'));
	        });

	        test('collapseHeaderCss will apply css to header on collapse', function () {
	            var $header = $('#header7b');
	            $header.expollapser({ collapseHeaderCss: 'myHeaderCss', collapseAnimator: function (header, content, toggler, callback) { $(content).hide(); callback(); } });
	            $header.expollapser('expand');
	            $header.expollapser('collapse');

	            ok($header.hasClass('myHeaderCss'));
	        });

	        test('collapseHeaderCss will remove css from header on expand', function () {
	            var $header = $('#header8b');
	            $header.expollapser({ collapseHeaderCss: 'myHeaderCss' });
	            $header.expollapser('expand');
	            $header.expollapser('collapse');
	            $header.expollapser('expand');
	            ok(!$header.hasClass('myHeaderCss'));
	        });

	        module('Setting headerReplaceHtml');

	        test('Replace expression will replace part of header html on expand', function () {
	            var $header = $('#header15');
	            $header.expollapser({ headerReplaceHtml: 'before<-->after', expandAnimator: function (header, content, toggler, callback) { $(content).show(); callback(); } });
	            $header.expollapser('expand');
	            equals($header.html(), 'This is after expand');
	        });

	        test('Replace expression will replace part of header html on collapse', function () {
	            var $header = $('#header17');
	            $header.expollapser({ open: true, headerReplaceHtml: 'before<-->after', collapseAnimator: function (header, content, toggler, callback) { $(content).hide(); callback(); } });
	            $header.expollapser('collapse');
	            equals($header.html(), 'This is before expand');
	        });

	        test('Replace expression will replace part of header html on expand and replace back on collapse', function () {
	            var $header = $('#header16');
	            $header.expollapser({ headerReplaceHtml: 'before<-->after', collapseAnimator: function (header, content, toggler, callback) { $(content).hide(); callback(); } });
	            $header.expollapser('expand');
	            $header.expollapser('collapse');
	            equals($header.html(), 'This is before expand');
	        });

	        test('Replace expression will replace on init with state closed', function () {
	            var $header = $('#header18');
	            $header.expollapser({ open: false, headerReplaceHtml: 'before<-->after' });
	            equals($header.html(), 'This is before expand');
	        });

	        test('Replace expression will replace on init with state open', function () {
	            var $header = $('#header19');
	            $header.expollapser({ open: true, headerReplaceHtml: 'before<-->after' });
	            equals($header.html(), 'This is after expand');
	        });
	    });				
	
	</script>
</head>
<body>
	<h1 id="qunit-header">
		QUnit Tests for Expollapser</h1>
	<h2 id="qunit-banner">
	</h2>
	<div id="qunit-testrunner-toolbar">
	</div>
	<h2 id="qunit-userAgent">
	</h2>
	<ol id="qunit-tests">
	</ol>
	<div id="qunit-fixture">
		<div id="header1"></div>
		<div id="content1"></div>
		<div id="header2"><a href="someUrl" id="link1">Link 1</a><a href="someUrl" id="link2">Link 2</a></div>
		<div id="content2"></div>
		<div id="header3"><span><img id="image1" src="none" class="selector1" /></span></div>
		<div id="content"></div>
		<div id="prevContent"></div>
		<div id="header4"></div>
		<div id="nextContent"></div>
		<div id="header5"></div>
		<div>Some other div</div>
		<p>Some paragraph</p>
		<div id="jqContentElem"></div>
		<div id="header6"></div>
        <div id="header6b"></div>
		<div id="header7"></div>
        <div id="header7b"></div>
		<div id="header8"></div>
        <div id="header8b"></div>
        <div id="header9">This is before expand</div>
        <div id="header10">This is before expand and the expollapser is closed</div>
        <div id="header11">This is before expand</div>
        <div id="header12"></div>
        <div id="header13"></div>
        <div id="header14"></div>
        <div id="header15">This is before expand</div>
        <div></div>
        <div id="header16">This is before expand</div>
        <div></div>
        <div id="header17">This is after expand</div>
        <div></div>
        <div id="header18">This is after expand</div>
        <div></div>
        <div id="header19">This is before expand</div>
        <div></div>
        <div id="header20"></div>
        <div style="display:block;"></div>
        <div id="header21"></div>
        <div style="display:none"></div>
	</div>
</body>
</html>
